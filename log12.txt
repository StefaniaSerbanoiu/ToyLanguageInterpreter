Id = 1
Execution stack: 
(Ref(int) v1 ; (int cnt ; (new(v1, 1) ; (CreateSemaphoreStatement(cnt, rH(v1))  ; (Fork((acquire(cnt)  ; (wH(v1, rH(v1) * 10) ; (Print(rH(v1)) ; release(cnt))))) ; (Fork((acquire(cnt)  ; (wH(v1, rH(v1) * 10) ; (wH(v1, rH(v1) * 2) ; (Print(rH(v1)) ; release(cnt)))))) ; (acquire(cnt)  ; (Print(rH(v1) - 1) ; release(cnt)))))))))
Symbol table: 
Output list: 
File table:
Heap memory:

Semaphore table e: 
{}

Id = 1
Execution stack: 
Ref(int) v1
(int cnt ; (new(v1, 1) ; (CreateSemaphoreStatement(cnt, rH(v1))  ; (Fork((acquire(cnt)  ; (wH(v1, rH(v1) * 10) ; (Print(rH(v1)) ; release(cnt))))) ; (Fork((acquire(cnt)  ; (wH(v1, rH(v1) * 10) ; (wH(v1, rH(v1) * 2) ; (Print(rH(v1)) ; release(cnt)))))) ; (acquire(cnt)  ; (Print(rH(v1) - 1) ; release(cnt))))))))
Symbol table: 
Output list: 
File table:
Heap memory:

Semaphore table e: 
{}

Id = 1
Execution stack: 
Ref(int) v1
(int cnt ; (new(v1, 1) ; (CreateSemaphoreStatement(cnt, rH(v1))  ; (Fork((acquire(cnt)  ; (wH(v1, rH(v1) * 10) ; (Print(rH(v1)) ; release(cnt))))) ; (Fork((acquire(cnt)  ; (wH(v1, rH(v1) * 10) ; (wH(v1, rH(v1) * 2) ; (Print(rH(v1)) ; release(cnt)))))) ; (acquire(cnt)  ; (Print(rH(v1) - 1) ; release(cnt))))))))
Symbol table: 
Output list: 
File table:
Heap memory:

Semaphore table e: 
{}

Id = 1
Execution stack: 
(int cnt ; (new(v1, 1) ; (CreateSemaphoreStatement(cnt, rH(v1))  ; (Fork((acquire(cnt)  ; (wH(v1, rH(v1) * 10) ; (Print(rH(v1)) ; release(cnt))))) ; (Fork((acquire(cnt)  ; (wH(v1, rH(v1) * 10) ; (wH(v1, rH(v1) * 2) ; (Print(rH(v1)) ; release(cnt)))))) ; (acquire(cnt)  ; (Print(rH(v1) - 1) ; release(cnt))))))))
Symbol table: 
v1 -> (0, int)
Output list: 
File table:
Heap memory:

Semaphore table e: 
{}

Id = 1
Execution stack: 
(int cnt ; (new(v1, 1) ; (CreateSemaphoreStatement(cnt, rH(v1))  ; (Fork((acquire(cnt)  ; (wH(v1, rH(v1) * 10) ; (Print(rH(v1)) ; release(cnt))))) ; (Fork((acquire(cnt)  ; (wH(v1, rH(v1) * 10) ; (wH(v1, rH(v1) * 2) ; (Print(rH(v1)) ; release(cnt)))))) ; (acquire(cnt)  ; (Print(rH(v1) - 1) ; release(cnt))))))))
Symbol table: 
v1 -> (0, int)
Output list: 
File table:
Heap memory:

Semaphore table e: 
{}

Id = 1
Execution stack: 
int cnt
(new(v1, 1) ; (CreateSemaphoreStatement(cnt, rH(v1))  ; (Fork((acquire(cnt)  ; (wH(v1, rH(v1) * 10) ; (Print(rH(v1)) ; release(cnt))))) ; (Fork((acquire(cnt)  ; (wH(v1, rH(v1) * 10) ; (wH(v1, rH(v1) * 2) ; (Print(rH(v1)) ; release(cnt)))))) ; (acquire(cnt)  ; (Print(rH(v1) - 1) ; release(cnt)))))))
Symbol table: 
v1 -> (0, int)
Output list: 
File table:
Heap memory:

Semaphore table e: 
{}

Id = 1
Execution stack: 
int cnt
(new(v1, 1) ; (CreateSemaphoreStatement(cnt, rH(v1))  ; (Fork((acquire(cnt)  ; (wH(v1, rH(v1) * 10) ; (Print(rH(v1)) ; release(cnt))))) ; (Fork((acquire(cnt)  ; (wH(v1, rH(v1) * 10) ; (wH(v1, rH(v1) * 2) ; (Print(rH(v1)) ; release(cnt)))))) ; (acquire(cnt)  ; (Print(rH(v1) - 1) ; release(cnt)))))))
Symbol table: 
v1 -> (0, int)
Output list: 
File table:
Heap memory:

Semaphore table e: 
{}

Id = 1
Execution stack: 
(new(v1, 1) ; (CreateSemaphoreStatement(cnt, rH(v1))  ; (Fork((acquire(cnt)  ; (wH(v1, rH(v1) * 10) ; (Print(rH(v1)) ; release(cnt))))) ; (Fork((acquire(cnt)  ; (wH(v1, rH(v1) * 10) ; (wH(v1, rH(v1) * 2) ; (Print(rH(v1)) ; release(cnt)))))) ; (acquire(cnt)  ; (Print(rH(v1) - 1) ; release(cnt)))))))
Symbol table: 
cnt -> 0
v1 -> (0, int)
Output list: 
File table:
Heap memory:

Semaphore table e: 
{}

Id = 1
Execution stack: 
(new(v1, 1) ; (CreateSemaphoreStatement(cnt, rH(v1))  ; (Fork((acquire(cnt)  ; (wH(v1, rH(v1) * 10) ; (Print(rH(v1)) ; release(cnt))))) ; (Fork((acquire(cnt)  ; (wH(v1, rH(v1) * 10) ; (wH(v1, rH(v1) * 2) ; (Print(rH(v1)) ; release(cnt)))))) ; (acquire(cnt)  ; (Print(rH(v1) - 1) ; release(cnt)))))))
Symbol table: 
cnt -> 0
v1 -> (0, int)
Output list: 
File table:
Heap memory:

Semaphore table e: 
{}

Id = 1
Execution stack: 
new(v1, 1)
(CreateSemaphoreStatement(cnt, rH(v1))  ; (Fork((acquire(cnt)  ; (wH(v1, rH(v1) * 10) ; (Print(rH(v1)) ; release(cnt))))) ; (Fork((acquire(cnt)  ; (wH(v1, rH(v1) * 10) ; (wH(v1, rH(v1) * 2) ; (Print(rH(v1)) ; release(cnt)))))) ; (acquire(cnt)  ; (Print(rH(v1) - 1) ; release(cnt))))))
Symbol table: 
cnt -> 0
v1 -> (0, int)
Output list: 
File table:
Heap memory:

Semaphore table e: 
{}

Id = 1
Execution stack: 
new(v1, 1)
(CreateSemaphoreStatement(cnt, rH(v1))  ; (Fork((acquire(cnt)  ; (wH(v1, rH(v1) * 10) ; (Print(rH(v1)) ; release(cnt))))) ; (Fork((acquire(cnt)  ; (wH(v1, rH(v1) * 10) ; (wH(v1, rH(v1) * 2) ; (Print(rH(v1)) ; release(cnt)))))) ; (acquire(cnt)  ; (Print(rH(v1) - 1) ; release(cnt))))))
Symbol table: 
cnt -> 0
v1 -> (0, int)
Output list: 
File table:
Heap memory:

Semaphore table e: 
{}

Id = 1
Execution stack: 
(CreateSemaphoreStatement(cnt, rH(v1))  ; (Fork((acquire(cnt)  ; (wH(v1, rH(v1) * 10) ; (Print(rH(v1)) ; release(cnt))))) ; (Fork((acquire(cnt)  ; (wH(v1, rH(v1) * 10) ; (wH(v1, rH(v1) * 2) ; (Print(rH(v1)) ; release(cnt)))))) ; (acquire(cnt)  ; (Print(rH(v1) - 1) ; release(cnt))))))
Symbol table: 
cnt -> 0
v1 -> (1, int)
Output list: 
File table:
Heap memory:
1 -> 1

Semaphore table e: 
{}

Id = 1
Execution stack: 
(CreateSemaphoreStatement(cnt, rH(v1))  ; (Fork((acquire(cnt)  ; (wH(v1, rH(v1) * 10) ; (Print(rH(v1)) ; release(cnt))))) ; (Fork((acquire(cnt)  ; (wH(v1, rH(v1) * 10) ; (wH(v1, rH(v1) * 2) ; (Print(rH(v1)) ; release(cnt)))))) ; (acquire(cnt)  ; (Print(rH(v1) - 1) ; release(cnt))))))
Symbol table: 
cnt -> 0
v1 -> (1, int)
Output list: 
File table:
Heap memory:
1 -> 1

Semaphore table e: 
{}

Id = 1
Execution stack: 
CreateSemaphoreStatement(cnt, rH(v1)) 
(Fork((acquire(cnt)  ; (wH(v1, rH(v1) * 10) ; (Print(rH(v1)) ; release(cnt))))) ; (Fork((acquire(cnt)  ; (wH(v1, rH(v1) * 10) ; (wH(v1, rH(v1) * 2) ; (Print(rH(v1)) ; release(cnt)))))) ; (acquire(cnt)  ; (Print(rH(v1) - 1) ; release(cnt)))))
Symbol table: 
cnt -> 0
v1 -> (1, int)
Output list: 
File table:
Heap memory:
1 -> 1

Semaphore table e: 
{}

Id = 1
Execution stack: 
CreateSemaphoreStatement(cnt, rH(v1)) 
(Fork((acquire(cnt)  ; (wH(v1, rH(v1) * 10) ; (Print(rH(v1)) ; release(cnt))))) ; (Fork((acquire(cnt)  ; (wH(v1, rH(v1) * 10) ; (wH(v1, rH(v1) * 2) ; (Print(rH(v1)) ; release(cnt)))))) ; (acquire(cnt)  ; (Print(rH(v1) - 1) ; release(cnt)))))
Symbol table: 
cnt -> 0
v1 -> (1, int)
Output list: 
File table:
Heap memory:
1 -> 1

Semaphore table e: 
{}

Id = 1
Execution stack: 
(Fork((acquire(cnt)  ; (wH(v1, rH(v1) * 10) ; (Print(rH(v1)) ; release(cnt))))) ; (Fork((acquire(cnt)  ; (wH(v1, rH(v1) * 10) ; (wH(v1, rH(v1) * 2) ; (Print(rH(v1)) ; release(cnt)))))) ; (acquire(cnt)  ; (Print(rH(v1) - 1) ; release(cnt)))))
Symbol table: 
cnt -> 1
v1 -> (1, int)
Output list: 
File table:
Heap memory:
1 -> 1

Semaphore table e: 
{1=1=[]}

Id = 1
Execution stack: 
(Fork((acquire(cnt)  ; (wH(v1, rH(v1) * 10) ; (Print(rH(v1)) ; release(cnt))))) ; (Fork((acquire(cnt)  ; (wH(v1, rH(v1) * 10) ; (wH(v1, rH(v1) * 2) ; (Print(rH(v1)) ; release(cnt)))))) ; (acquire(cnt)  ; (Print(rH(v1) - 1) ; release(cnt)))))
Symbol table: 
cnt -> 1
v1 -> (1, int)
Output list: 
File table:
Heap memory:
1 -> 1

Semaphore table e: 
{1=1=[]}

Id = 1
Execution stack: 
Fork((acquire(cnt)  ; (wH(v1, rH(v1) * 10) ; (Print(rH(v1)) ; release(cnt)))))
(Fork((acquire(cnt)  ; (wH(v1, rH(v1) * 10) ; (wH(v1, rH(v1) * 2) ; (Print(rH(v1)) ; release(cnt)))))) ; (acquire(cnt)  ; (Print(rH(v1) - 1) ; release(cnt))))
Symbol table: 
cnt -> 1
v1 -> (1, int)
Output list: 
File table:
Heap memory:
1 -> 1

Semaphore table e: 
{1=1=[]}

Id = 1
Execution stack: 
Fork((acquire(cnt)  ; (wH(v1, rH(v1) * 10) ; (Print(rH(v1)) ; release(cnt)))))
(Fork((acquire(cnt)  ; (wH(v1, rH(v1) * 10) ; (wH(v1, rH(v1) * 2) ; (Print(rH(v1)) ; release(cnt)))))) ; (acquire(cnt)  ; (Print(rH(v1) - 1) ; release(cnt))))
Symbol table: 
cnt -> 1
v1 -> (1, int)
Output list: 
File table:
Heap memory:
1 -> 1

Semaphore table e: 
{1=1=[]}

Id = 1
Execution stack: 
(Fork((acquire(cnt)  ; (wH(v1, rH(v1) * 10) ; (wH(v1, rH(v1) * 2) ; (Print(rH(v1)) ; release(cnt)))))) ; (acquire(cnt)  ; (Print(rH(v1) - 1) ; release(cnt))))
Symbol table: 
cnt -> 1
v1 -> (1, int)
Output list: 
File table:
Heap memory:
1 -> 1

Semaphore table e: 
{1=1=[]}

Id = 2
Execution stack: 
(acquire(cnt)  ; (wH(v1, rH(v1) * 10) ; (Print(rH(v1)) ; release(cnt))))
Symbol table: 
cnt -> 1
v1 -> (1, int)
Output list: 
File table:
Heap memory:
1 -> 1

Semaphore table e: 
{1=1=[]}

Id = 1
Execution stack: 
(Fork((acquire(cnt)  ; (wH(v1, rH(v1) * 10) ; (wH(v1, rH(v1) * 2) ; (Print(rH(v1)) ; release(cnt)))))) ; (acquire(cnt)  ; (Print(rH(v1) - 1) ; release(cnt))))
Symbol table: 
cnt -> 1
v1 -> (1, int)
Output list: 
File table:
Heap memory:
1 -> 1

Semaphore table e: 
{1=1=[]}

Id = 2
Execution stack: 
(acquire(cnt)  ; (wH(v1, rH(v1) * 10) ; (Print(rH(v1)) ; release(cnt))))
Symbol table: 
cnt -> 1
v1 -> (1, int)
Output list: 
File table:
Heap memory:
1 -> 1

Semaphore table e: 
{1=1=[]}

Id = 1
Execution stack: 
Fork((acquire(cnt)  ; (wH(v1, rH(v1) * 10) ; (wH(v1, rH(v1) * 2) ; (Print(rH(v1)) ; release(cnt))))))
(acquire(cnt)  ; (Print(rH(v1) - 1) ; release(cnt)))
Symbol table: 
cnt -> 1
v1 -> (1, int)
Output list: 
File table:
Heap memory:
1 -> 1

Semaphore table e: 
{1=1=[]}

Id = 2
Execution stack: 
acquire(cnt) 
(wH(v1, rH(v1) * 10) ; (Print(rH(v1)) ; release(cnt)))
Symbol table: 
cnt -> 1
v1 -> (1, int)
Output list: 
File table:
Heap memory:
1 -> 1

Semaphore table e: 
{1=1=[]}

Id = 1
Execution stack: 
Fork((acquire(cnt)  ; (wH(v1, rH(v1) * 10) ; (wH(v1, rH(v1) * 2) ; (Print(rH(v1)) ; release(cnt))))))
(acquire(cnt)  ; (Print(rH(v1) - 1) ; release(cnt)))
Symbol table: 
cnt -> 1
v1 -> (1, int)
Output list: 
File table:
Heap memory:
1 -> 1

Semaphore table e: 
{1=1=[]}

Id = 2
Execution stack: 
acquire(cnt) 
(wH(v1, rH(v1) * 10) ; (Print(rH(v1)) ; release(cnt)))
Symbol table: 
cnt -> 1
v1 -> (1, int)
Output list: 
File table:
Heap memory:
1 -> 1

Semaphore table e: 
{1=1=[]}

Id = 1
Execution stack: 
(acquire(cnt)  ; (Print(rH(v1) - 1) ; release(cnt)))
Symbol table: 
cnt -> 1
v1 -> (1, int)
Output list: 
File table:
Heap memory:
1 -> 1

Semaphore table e: 
{1=1=[2]}

Id = 2
Execution stack: 
(wH(v1, rH(v1) * 10) ; (Print(rH(v1)) ; release(cnt)))
Symbol table: 
cnt -> 1
v1 -> (1, int)
Output list: 
File table:
Heap memory:
1 -> 1

Semaphore table e: 
{1=1=[2]}

Id = 3
Execution stack: 
(acquire(cnt)  ; (wH(v1, rH(v1) * 10) ; (wH(v1, rH(v1) * 2) ; (Print(rH(v1)) ; release(cnt)))))
Symbol table: 
cnt -> 1
v1 -> (1, int)
Output list: 
File table:
Heap memory:
1 -> 1

Semaphore table e: 
{1=1=[2]}

Id = 1
Execution stack: 
(acquire(cnt)  ; (Print(rH(v1) - 1) ; release(cnt)))
Symbol table: 
cnt -> 1
v1 -> (1, int)
Output list: 
File table:
Heap memory:
1 -> 1

Semaphore table e: 
{1=1=[2]}

Id = 2
Execution stack: 
(wH(v1, rH(v1) * 10) ; (Print(rH(v1)) ; release(cnt)))
Symbol table: 
cnt -> 1
v1 -> (1, int)
Output list: 
File table:
Heap memory:
1 -> 1

Semaphore table e: 
{1=1=[2]}

Id = 3
Execution stack: 
(acquire(cnt)  ; (wH(v1, rH(v1) * 10) ; (wH(v1, rH(v1) * 2) ; (Print(rH(v1)) ; release(cnt)))))
Symbol table: 
cnt -> 1
v1 -> (1, int)
Output list: 
File table:
Heap memory:
1 -> 1

Semaphore table e: 
{1=1=[2]}

Id = 1
Execution stack: 
acquire(cnt) 
(Print(rH(v1) - 1) ; release(cnt))
Symbol table: 
cnt -> 1
v1 -> (1, int)
Output list: 
File table:
Heap memory:
1 -> 1

Semaphore table e: 
{1=1=[2]}

Id = 2
Execution stack: 
wH(v1, rH(v1) * 10)
(Print(rH(v1)) ; release(cnt))
Symbol table: 
cnt -> 1
v1 -> (1, int)
Output list: 
File table:
Heap memory:
1 -> 1

Semaphore table e: 
{1=1=[2]}

Id = 3
Execution stack: 
acquire(cnt) 
(wH(v1, rH(v1) * 10) ; (wH(v1, rH(v1) * 2) ; (Print(rH(v1)) ; release(cnt))))
Symbol table: 
cnt -> 1
v1 -> (1, int)
Output list: 
File table:
Heap memory:
1 -> 1

Semaphore table e: 
{1=1=[2]}

Id = 1
Execution stack: 
acquire(cnt) 
(Print(rH(v1) - 1) ; release(cnt))
Symbol table: 
cnt -> 1
v1 -> (1, int)
Output list: 
File table:
Heap memory:
1 -> 1

Semaphore table e: 
{1=1=[2]}

Id = 2
Execution stack: 
wH(v1, rH(v1) * 10)
(Print(rH(v1)) ; release(cnt))
Symbol table: 
cnt -> 1
v1 -> (1, int)
Output list: 
File table:
Heap memory:
1 -> 1

Semaphore table e: 
{1=1=[2]}

Id = 3
Execution stack: 
acquire(cnt) 
(wH(v1, rH(v1) * 10) ; (wH(v1, rH(v1) * 2) ; (Print(rH(v1)) ; release(cnt))))
Symbol table: 
cnt -> 1
v1 -> (1, int)
Output list: 
File table:
Heap memory:
1 -> 1

Semaphore table e: 
{1=1=[2]}

Id = 1
Execution stack: 
acquire(cnt) 
(Print(rH(v1) - 1) ; release(cnt))
Symbol table: 
cnt -> 1
v1 -> (1, int)
Output list: 
File table:
Heap memory:
1 -> 10

Semaphore table e: 
{1=1=[2]}

Id = 2
Execution stack: 
(Print(rH(v1)) ; release(cnt))
Symbol table: 
cnt -> 1
v1 -> (1, int)
Output list: 
File table:
Heap memory:
1 -> 10

Semaphore table e: 
{1=1=[2]}

Id = 3
Execution stack: 
acquire(cnt) 
(wH(v1, rH(v1) * 10) ; (wH(v1, rH(v1) * 2) ; (Print(rH(v1)) ; release(cnt))))
Symbol table: 
cnt -> 1
v1 -> (1, int)
Output list: 
File table:
Heap memory:
1 -> 10

Semaphore table e: 
{1=1=[2]}

Id = 1
Execution stack: 
acquire(cnt) 
(Print(rH(v1) - 1) ; release(cnt))
Symbol table: 
cnt -> 1
v1 -> (1, int)
Output list: 
File table:
Heap memory:
1 -> 10

Semaphore table e: 
{1=1=[2]}

Id = 2
Execution stack: 
(Print(rH(v1)) ; release(cnt))
Symbol table: 
cnt -> 1
v1 -> (1, int)
Output list: 
File table:
Heap memory:
1 -> 10

Semaphore table e: 
{1=1=[2]}

Id = 3
Execution stack: 
acquire(cnt) 
(wH(v1, rH(v1) * 10) ; (wH(v1, rH(v1) * 2) ; (Print(rH(v1)) ; release(cnt))))
Symbol table: 
cnt -> 1
v1 -> (1, int)
Output list: 
File table:
Heap memory:
1 -> 10

Semaphore table e: 
{1=1=[2]}

Id = 1
Execution stack: 
acquire(cnt) 
(Print(rH(v1) - 1) ; release(cnt))
Symbol table: 
cnt -> 1
v1 -> (1, int)
Output list: 
File table:
Heap memory:
1 -> 10

Semaphore table e: 
{1=1=[2]}

Id = 2
Execution stack: 
Print(rH(v1))
release(cnt)
Symbol table: 
cnt -> 1
v1 -> (1, int)
Output list: 
File table:
Heap memory:
1 -> 10

Semaphore table e: 
{1=1=[2]}

Id = 3
Execution stack: 
acquire(cnt) 
(wH(v1, rH(v1) * 10) ; (wH(v1, rH(v1) * 2) ; (Print(rH(v1)) ; release(cnt))))
Symbol table: 
cnt -> 1
v1 -> (1, int)
Output list: 
File table:
Heap memory:
1 -> 10

Semaphore table e: 
{1=1=[2]}

Id = 1
Execution stack: 
acquire(cnt) 
(Print(rH(v1) - 1) ; release(cnt))
Symbol table: 
cnt -> 1
v1 -> (1, int)
Output list: 
File table:
Heap memory:
1 -> 10

Semaphore table e: 
{1=1=[2]}

Id = 2
Execution stack: 
Print(rH(v1))
release(cnt)
Symbol table: 
cnt -> 1
v1 -> (1, int)
Output list: 
File table:
Heap memory:
1 -> 10

Semaphore table e: 
{1=1=[2]}

Id = 3
Execution stack: 
acquire(cnt) 
(wH(v1, rH(v1) * 10) ; (wH(v1, rH(v1) * 2) ; (Print(rH(v1)) ; release(cnt))))
Symbol table: 
cnt -> 1
v1 -> (1, int)
Output list: 
File table:
Heap memory:
1 -> 10

Semaphore table e: 
{1=1=[2]}

Id = 1
Execution stack: 
acquire(cnt) 
(Print(rH(v1) - 1) ; release(cnt))
Symbol table: 
cnt -> 1
v1 -> (1, int)
Output list: 
10
File table:
Heap memory:
1 -> 10

Semaphore table e: 
{1=1=[2]}

Id = 2
Execution stack: 
release(cnt)
Symbol table: 
cnt -> 1
v1 -> (1, int)
Output list: 
10
File table:
Heap memory:
1 -> 10

Semaphore table e: 
{1=1=[2]}

Id = 3
Execution stack: 
acquire(cnt) 
(wH(v1, rH(v1) * 10) ; (wH(v1, rH(v1) * 2) ; (Print(rH(v1)) ; release(cnt))))
Symbol table: 
cnt -> 1
v1 -> (1, int)
Output list: 
10
File table:
Heap memory:
1 -> 10

Semaphore table e: 
{1=1=[2]}

Id = 1
Execution stack: 
acquire(cnt) 
(Print(rH(v1) - 1) ; release(cnt))
Symbol table: 
cnt -> 1
v1 -> (1, int)
Output list: 
10
File table:
Heap memory:
1 -> 10

Semaphore table e: 
{1=1=[2]}

Id = 2
Execution stack: 
release(cnt)
Symbol table: 
cnt -> 1
v1 -> (1, int)
Output list: 
10
File table:
Heap memory:
1 -> 10

Semaphore table e: 
{1=1=[2]}

Id = 3
Execution stack: 
acquire(cnt) 
(wH(v1, rH(v1) * 10) ; (wH(v1, rH(v1) * 2) ; (Print(rH(v1)) ; release(cnt))))
Symbol table: 
cnt -> 1
v1 -> (1, int)
Output list: 
10
File table:
Heap memory:
1 -> 10

Semaphore table e: 
{1=1=[2]}

Id = 1
Execution stack: 
acquire(cnt) 
(Print(rH(v1) - 1) ; release(cnt))
Symbol table: 
cnt -> 1
v1 -> (1, int)
Output list: 
10
File table:
Heap memory:
1 -> 10

Semaphore table e: 
{1=1=[]}

Id = 2
Execution stack: 
Symbol table: 
cnt -> 1
v1 -> (1, int)
Output list: 
10
File table:
Heap memory:
1 -> 10

Semaphore table e: 
{1=1=[]}

Id = 3
Execution stack: 
acquire(cnt) 
(wH(v1, rH(v1) * 10) ; (wH(v1, rH(v1) * 2) ; (Print(rH(v1)) ; release(cnt))))
Symbol table: 
cnt -> 1
v1 -> (1, int)
Output list: 
10
File table:
Heap memory:
1 -> 10

Semaphore table e: 
{1=1=[]}

Id = 1
Execution stack: 
acquire(cnt) 
(Print(rH(v1) - 1) ; release(cnt))
Symbol table: 
cnt -> 1
v1 -> (1, int)
Output list: 
10
File table:
Heap memory:
1 -> 10

Semaphore table e: 
{1=1=[]}

Id = 3
Execution stack: 
acquire(cnt) 
(wH(v1, rH(v1) * 10) ; (wH(v1, rH(v1) * 2) ; (Print(rH(v1)) ; release(cnt))))
Symbol table: 
cnt -> 1
v1 -> (1, int)
Output list: 
10
File table:
Heap memory:
1 -> 10

Semaphore table e: 
{1=1=[]}

Id = 1
Execution stack: 
(Print(rH(v1) - 1) ; release(cnt))
Symbol table: 
cnt -> 1
v1 -> (1, int)
Output list: 
10
File table:
Heap memory:
1 -> 10

Semaphore table e: 
{1=1=[1]}

Id = 3
Execution stack: 
acquire(cnt) 
(wH(v1, rH(v1) * 10) ; (wH(v1, rH(v1) * 2) ; (Print(rH(v1)) ; release(cnt))))
Symbol table: 
cnt -> 1
v1 -> (1, int)
Output list: 
10
File table:
Heap memory:
1 -> 10

Semaphore table e: 
{1=1=[1]}

Id = 1
Execution stack: 
(Print(rH(v1) - 1) ; release(cnt))
Symbol table: 
cnt -> 1
v1 -> (1, int)
Output list: 
10
File table:
Heap memory:
1 -> 10

Semaphore table e: 
{1=1=[1]}

Id = 3
Execution stack: 
acquire(cnt) 
(wH(v1, rH(v1) * 10) ; (wH(v1, rH(v1) * 2) ; (Print(rH(v1)) ; release(cnt))))
Symbol table: 
cnt -> 1
v1 -> (1, int)
Output list: 
10
File table:
Heap memory:
1 -> 10

Semaphore table e: 
{1=1=[1]}

Id = 1
Execution stack: 
Print(rH(v1) - 1)
release(cnt)
Symbol table: 
cnt -> 1
v1 -> (1, int)
Output list: 
10
File table:
Heap memory:
1 -> 10

Semaphore table e: 
{1=1=[1]}

Id = 3
Execution stack: 
acquire(cnt) 
(wH(v1, rH(v1) * 10) ; (wH(v1, rH(v1) * 2) ; (Print(rH(v1)) ; release(cnt))))
Symbol table: 
cnt -> 1
v1 -> (1, int)
Output list: 
10
File table:
Heap memory:
1 -> 10

Semaphore table e: 
{1=1=[1]}

Id = 1
Execution stack: 
Print(rH(v1) - 1)
release(cnt)
Symbol table: 
cnt -> 1
v1 -> (1, int)
Output list: 
10
File table:
Heap memory:
1 -> 10

Semaphore table e: 
{1=1=[1]}

Id = 3
Execution stack: 
acquire(cnt) 
(wH(v1, rH(v1) * 10) ; (wH(v1, rH(v1) * 2) ; (Print(rH(v1)) ; release(cnt))))
Symbol table: 
cnt -> 1
v1 -> (1, int)
Output list: 
10
File table:
Heap memory:
1 -> 10

Semaphore table e: 
{1=1=[1]}

Id = 1
Execution stack: 
release(cnt)
Symbol table: 
cnt -> 1
v1 -> (1, int)
Output list: 
10
9
File table:
Heap memory:
1 -> 10

Semaphore table e: 
{1=1=[1]}

Id = 3
Execution stack: 
acquire(cnt) 
(wH(v1, rH(v1) * 10) ; (wH(v1, rH(v1) * 2) ; (Print(rH(v1)) ; release(cnt))))
Symbol table: 
cnt -> 1
v1 -> (1, int)
Output list: 
10
9
File table:
Heap memory:
1 -> 10

Semaphore table e: 
{1=1=[1]}

Id = 1
Execution stack: 
release(cnt)
Symbol table: 
cnt -> 1
v1 -> (1, int)
Output list: 
10
9
File table:
Heap memory:
1 -> 10

Semaphore table e: 
{1=1=[1]}

Id = 3
Execution stack: 
acquire(cnt) 
(wH(v1, rH(v1) * 10) ; (wH(v1, rH(v1) * 2) ; (Print(rH(v1)) ; release(cnt))))
Symbol table: 
cnt -> 1
v1 -> (1, int)
Output list: 
10
9
File table:
Heap memory:
1 -> 10

Semaphore table e: 
{1=1=[1]}

Id = 1
Execution stack: 
Symbol table: 
cnt -> 1
v1 -> (1, int)
Output list: 
10
9
File table:
Heap memory:
1 -> 10

Semaphore table e: 
{1=1=[3]}

Id = 3
Execution stack: 
(wH(v1, rH(v1) * 10) ; (wH(v1, rH(v1) * 2) ; (Print(rH(v1)) ; release(cnt))))
Symbol table: 
cnt -> 1
v1 -> (1, int)
Output list: 
10
9
File table:
Heap memory:
1 -> 10

Semaphore table e: 
{1=1=[3]}

Id = 3
Execution stack: 
(wH(v1, rH(v1) * 10) ; (wH(v1, rH(v1) * 2) ; (Print(rH(v1)) ; release(cnt))))
Symbol table: 
cnt -> 1
v1 -> (1, int)
Output list: 
10
9
File table:
Heap memory:
1 -> 10

Semaphore table e: 
{1=1=[3]}

Id = 3
Execution stack: 
wH(v1, rH(v1) * 10)
(wH(v1, rH(v1) * 2) ; (Print(rH(v1)) ; release(cnt)))
Symbol table: 
cnt -> 1
v1 -> (1, int)
Output list: 
10
9
File table:
Heap memory:
1 -> 10

Semaphore table e: 
{1=1=[3]}

Id = 3
Execution stack: 
wH(v1, rH(v1) * 10)
(wH(v1, rH(v1) * 2) ; (Print(rH(v1)) ; release(cnt)))
Symbol table: 
cnt -> 1
v1 -> (1, int)
Output list: 
10
9
File table:
Heap memory:
1 -> 10

Semaphore table e: 
{1=1=[3]}

Id = 3
Execution stack: 
(wH(v1, rH(v1) * 2) ; (Print(rH(v1)) ; release(cnt)))
Symbol table: 
cnt -> 1
v1 -> (1, int)
Output list: 
10
9
File table:
Heap memory:
1 -> 100

Semaphore table e: 
{1=1=[3]}

Id = 3
Execution stack: 
(wH(v1, rH(v1) * 2) ; (Print(rH(v1)) ; release(cnt)))
Symbol table: 
cnt -> 1
v1 -> (1, int)
Output list: 
10
9
File table:
Heap memory:
1 -> 100

Semaphore table e: 
{1=1=[3]}

Id = 3
Execution stack: 
wH(v1, rH(v1) * 2)
(Print(rH(v1)) ; release(cnt))
Symbol table: 
cnt -> 1
v1 -> (1, int)
Output list: 
10
9
File table:
Heap memory:
1 -> 100

Semaphore table e: 
{1=1=[3]}

Id = 3
Execution stack: 
wH(v1, rH(v1) * 2)
(Print(rH(v1)) ; release(cnt))
Symbol table: 
cnt -> 1
v1 -> (1, int)
Output list: 
10
9
File table:
Heap memory:
1 -> 100

Semaphore table e: 
{1=1=[3]}

Id = 3
Execution stack: 
(Print(rH(v1)) ; release(cnt))
Symbol table: 
cnt -> 1
v1 -> (1, int)
Output list: 
10
9
File table:
Heap memory:
1 -> 200

Semaphore table e: 
{1=1=[3]}

Id = 3
Execution stack: 
(Print(rH(v1)) ; release(cnt))
Symbol table: 
cnt -> 1
v1 -> (1, int)
Output list: 
10
9
File table:
Heap memory:
1 -> 200

Semaphore table e: 
{1=1=[3]}

Id = 3
Execution stack: 
Print(rH(v1))
release(cnt)
Symbol table: 
cnt -> 1
v1 -> (1, int)
Output list: 
10
9
File table:
Heap memory:
1 -> 200

Semaphore table e: 
{1=1=[3]}

Id = 3
Execution stack: 
Print(rH(v1))
release(cnt)
Symbol table: 
cnt -> 1
v1 -> (1, int)
Output list: 
10
9
File table:
Heap memory:
1 -> 200

Semaphore table e: 
{1=1=[3]}

Id = 3
Execution stack: 
release(cnt)
Symbol table: 
cnt -> 1
v1 -> (1, int)
Output list: 
10
9
200
File table:
Heap memory:
1 -> 200

Semaphore table e: 
{1=1=[3]}

Id = 3
Execution stack: 
release(cnt)
Symbol table: 
cnt -> 1
v1 -> (1, int)
Output list: 
10
9
200
File table:
Heap memory:
1 -> 200

Semaphore table e: 
{1=1=[3]}

Id = 3
Execution stack: 
Symbol table: 
cnt -> 1
v1 -> (1, int)
Output list: 
10
9
200
File table:
Heap memory:
1 -> 200

Semaphore table e: 
{1=1=[]}

